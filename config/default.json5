{
  db: 'db.sqlite',

  strategy: 'blockchain',

  ipfs: {
    clientOptions: {
      // The default value for go-ipfs
      url: 'http://localhost:5001',
    },

    // What is timeout for fetching size of given hash
    sizeFetchTimeout: '4m'
  },

  blockchain: {
    // Events that will be listened to
    events: ['TotalCapacitySet', 'MessageEmitted', 'NewAgreement', 'AgreementFundsDeposited', 'AgreementFundsWithdrawn', 'AgreementFundsPayout', 'AgreementStopped'],

    // Topics that will be listened to
    topics: [
      'TotalCapacitySet(address,uin128)',
//      'BillingPlanSet(address,uint64,uint64)',
      'MessageEmitted(address,bytes32[])',
      'NewAgreement(bytes32,bytes32[],address,address,uint128,uint64,uint64,uint256)',
      'AgreementFundsDeposited(bytes32,uint256)',
      'AgreementFundsWithdrawn(bytes32,uint256)',
      'AgreementFundsPayout(bytes32,uint256)',
      'AgreementStopped(bytes32)',
    ],

    // Immediately remove events when they are confirmed
    waitBlockCountBeforeConfirmationRemoved: 0,

    // Network ID check for blockchain connection, * means any
    networkId: "*",

    // Specify behavior of EventsEmitter, that retrieves events from blockchain and pass them onwards for further processing.
    eventsEmitter: {
      // If to use polling strategy, if false then listening is used.
      polling: true,

      // Interval in milliseconds, how often is blockchain checked.
      pollingInterval: 5000,

      // Starting block that upon first start of the service, will the blockchain be crawled for the past events.
      startingBlock: 'genesis',

      // Number of blocks that will be waited before passing an event for further processing.
      confirmations: 6
    },

    // Specify behavior of NewBlockEmitter, that detects new blocks on blockchain.
    newBlockEmitter: {
      // If to use polling strategy, if false then listening is used.
      polling: true
    }
  },
  marketplace: {
    offers: '/storage/v0/offers',
    agreements: '/storage/v0/agreements',
    newBlock: '/new-block'
  },

  jobs: {
    // Number of how many retries before job is pronounced for errored one
    retries: 3
  },

  log: {
    level: "warn",
    filter: null,
    path: null
  }
}
