version: 2.1

commands:
  install-deps:
    description: "Install deps"
    steps:
      - run: npm ci

  install-ipfs:
    description: "Install IPFS"
    steps:
      - run: |
          wget https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-amd64.tar.gz
          tar -xvzf go-ipfs_v0.6.0_linux-amd64.tar.gz
          cd go-ipfs && sudo bash install.sh
          ipfs --version

  install-sqlite:
    description: "Install SQLite"
    steps:
      - run: npm install sqlite3

  spawn-ipfs-nodes:
    description: "Init 2 IPFS repos and spawn 2 nodes in background"
    steps:
      - run: npm run init
      - run:
          command: export IPFS_PATH=./.repos/consumer && ipfs daemon
          background: true
      - run:
          command: export IPFS_PATH=./.repos/provider && ipfs daemon
          background: true
      - run:
          name: Waiting for the IPFS daemons
          no_output_timeout: 60s
          command: |
            while (! ipfs id --api=/ip4/127.0.0.1/tcp/5001 2>/dev/null) || ! ipfs id --api=/ip4/127.0.0.1/tcp/5002 2>/dev/null; do
              sleep 1
            done




jobs:
  check:
    parameters:
      cache:
        type: boolean
        default: true
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - when:
          condition: <<parameters.cache>>
          steps:
            - restore_cache:
                keys:
                  # when lock file changes, use increasingly general patterns to restore cache
                  - node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
                  - node-10-{{ .Branch }}-
                  - node-10-
      - install-deps
      - when:
          condition: <<parameters.cache>>
          steps:
            - save_cache:
                paths:
                  - ./node_modules
                key: node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: "Commit linting"
          command: |
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            npx tasegir commitlint --circleci
      - run:
          name: "Dependency check"
          command: npx tasegir dep-check
      - run:
          name: "Code linting"
          command: npx tasegir lint

  # Run test on top of Ganache
  node-tests:
    parameters:
      version:
        type: string
      cache:
        type: boolean
        default: true
    docker:
      - image: circleci/node:<< parameters.version >>
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 8545 -e 100000000000 -l 4700038
    steps:
      - checkout
      - when:
          condition: <<parameters.cache>>
          steps:
            - restore_cache:
                keys:
                  # when lock file changes, use increasingly general patterns to restore cache
                  - node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
                  - node-10-{{ .Branch }}-
                  - node-10-
      - install-deps
      - when:
          condition: <<parameters.cache>>
          steps:
            - save_cache:
                paths:
                  - ./node_modules
                key: node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - install-ipfs
      - spawn-ipfs-nodes
      - install-sqlite
      - run:
          name: "Node tests"
          command: npx tasegir test --target node --reporter lcovonly -- --bail

  # Run test on top of PSK node
  node-tests-rsk:
    # Enable docker
#    machine: true
    parameters:
      version:
        type: string
    docker:
      - image: circleci/node:<< parameters.version >>

    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-10-{{ .Branch }}-
            - node-10-
      - run:
          name: "Install and Run RSK Node"
          command: |
            docker build -t regtest -f Dockerfile .
            docker run -d --name regtest-node-01  -p 4444:8545 -p 30305:30305 regtest
      - install-deps
      - save_cache:
          paths:
            - ./node_modules
          key: node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - install-ipfs
      - spawn-ipfs-nodes
      - install-sqlite
      - run:
          name: "Node tests"
          command: npx tasegir test --target node --reporter lcovonly -- --bail
  #      - sonarcloud/scan

#orbs:
#  sonarcloud: sonarsource/sonarcloud@1.0.1

workflows:
  test:
    jobs:
#      - check
#      - node-tests:
#          version: '10'
#          name: node-10
#          #          context: SonarCloud
#          requires:
#            - check
#      - node-tests:
#          version: '12'
#          name: node-12
#          #          context: SonarCloud
#          requires:
#            - check
#      - node-tests:
#          version: '14'
#          name: node-14
#          #          context: SonarCloud
#          requires:
#            - check
      - node-tests-rsk:
          version: '10'
          name: node-10
          #          context: SonarCloud
#          requires:
#            - check

