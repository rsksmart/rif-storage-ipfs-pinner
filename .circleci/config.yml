version: 2.1

jobs:
  check:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-10-{{ .Branch }}-
            - node-10-
      - run:
          name: "Install deps"
          command: npm ci
      - save_cache:
          paths:
            - ./node_modules
          key: node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: "Commit linting"
          command: |
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            npx tasegir commitlint --circleci
#      - run:
#          name: "Dependency check"
#          command: npx tasegir dep-check
      - run:
          name: "Code linting"
          command: npx tasegir lint
  node-tests:
    parameters:
      version:
        type: string
    docker:
      - image: circleci/node:<< parameters.version >>
    steps:
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-10-{{ .Branch }}-
            - node-10-
      - run:
          name: "Install deps"
          command: npm ci
      - save_cache:
          paths:
            - ./node_modules
          key: node-10-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: install ipfs
          command: wget https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-amd64.tar.gz && tar -xvzf go-ipfs_v0.6.0_linux-amd64.tar.gz && cd go-ipfs && sudo bash install.sh && ipfs --version
      - run:
          name: "Init IPFS repo"
          command: npm run init
      - run:
          name: "Run Consumer Node"
          command: export IPFS_PATH=./.repos/consumer && ipfs daemon
          background: true
      - run:
          name: "Run Provider Node"
          command: export IPFS_PATH=./.repos/provider && ipfs daemon
          background: true
      - run:
          name: Waiting for the IPFS daemons
          no_output_timeout: 30s
          command: |
            while (! ipfs id --api=/ip4/127.0.0.1/tcp/5001 2>/dev/null) || ! ipfs id --api=/ip4/127.0.0.1/tcp/5002 2>/dev/null; do
              sleep 1
            done
      - run:
          name: "Install sqlite"
          command: npm install sqlite3
      - run:
          name: "Node tests"
          command: npx tasegir test --target node --reporter lcovonly -- --bail
#      - sonarcloud/scan

#orbs:
#  sonarcloud: sonarsource/sonarcloud@1.0.1

workflows:
  test:
    jobs:
      - check
      - node-tests:
          version: '10'
          name: node-10
          #          context: SonarCloud
          requires:
            - check
      - node-tests:
          version: '12'
          name: node-12
          #          context: SonarCloud
          requires:
            - check
      - node-tests:
          version: '14'
          name: node-14
          #          context: SonarCloud
          requires:
            - check
