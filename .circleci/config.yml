version: 2.1

jobs:
  check:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      #      - restore_cache:
      #          keys:
      #            # when lock file changes, use increasingly general patterns to restore cache
      #            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      #            - node-v1-{{ .Branch }}-
      #            - node-v1-
      - run:
          name: "Install deps"
          command: npm ci
      #      - save_cache:
      #          paths:
      #            - ./node_modules
      #          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: "Commit linting"
          command: |
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            npx tasegir commitlint --circleci
      - run:
          name: "Dependency check"
          command: npx tasegir dep-check
      - run:
          name: "Code linting"
          command: npx tasegir lint

  node-tests:
    parameters:
      version:
        type: string
    docker:
      - image: circleci/node:<< parameters.version >>
    steps:
      - checkout
      - run:
          name: "Install deps"
          command: npm ci
      #      - restore_cache:
      #          keys:
      #            # when lock file changes, use increasingly general patterns to restore cache
      #            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      #            - node-v1-{{ .Branch }}-
      #            - node-v1-
      - run:
          name: "Init and run IPFS nodes"
          command: npm run init && npm run ipfs:consumer && npm run ipfs:provider
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for IPFS
          command: dockerize -wait http://127.0.0.1:5001 -timeout 2m && dockerize -wait http://127.0.0.1:5001 -timeout 2m
      - run:
          name: "Install sqlite"
          command: npm install sqlite3
      - run:
          name: "Node tests"
          command: npx tasegir test --target node --reporter lcovonly -- --bail
#      - sonarcloud/scan

#orbs:
#  sonarcloud: sonarsource/sonarcloud@1.0.1

workflows:
  test:
    jobs:
      - check
      - node-tests:
          version: '10'
          name: node-10
          #          context: SonarCloud
          requires:
            - check
      - node-tests:
          version: '12'
          name: node-12
          #          context: SonarCloud
          requires:
            - check
      - node-tests:
          version: '14'
          name: node-14
          #          context: SonarCloud
          requires:
            - check
